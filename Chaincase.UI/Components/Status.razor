@inject StatusViewModel StatusViewModel

@inherits ReactiveComponentBase<StatusViewModel>

<IonList>
    <IonItem>
        <IonLabel>Numbers of Peers: @ViewModel.Peers</IonLabel>
    </IonItem>
    <IonItem>
        <IonLabel>Backend Status: @Backendlabel()</IonLabel>
    </IonItem>
    <IonItem>
        <IonLabel>Tor Status: @TorLabel()</IonLabel>
    </IonItem>
    <IonItem>
        <IonLabel>Tor Hidden Service Status: @TorHiddenServiceStatus()</IonLabel>
    </IonItem>
    <IonItem>
        @if (ViewModel.FiltersLeft == 0)
        {
            <IonLabel>Your wallet is sync'd</IonLabel>
        }
        else
        {
            <IonLabel>Filters left: @ViewModel.FiltersLeft</IonLabel>
        }
    </IonItem>
    @if (ViewModel.ProgressPercent != 100)
    {
        <IonItem>
            <IonProgressBar value="@ViewModel.ProgressPercent" />
        </IonItem>
    }

</IonList>

@code{

    protected override void OnInitialized()
    {
        ViewModel = StatusViewModel;
    }

    public string Backendlabel() {
        switch (ViewModel.Backend) {
            case WalletWasabi.Models.BackendStatus.NotConnected:
                return "⌛";
            case WalletWasabi.Models.BackendStatus.Connected:
                return "✅";
            default:
                return "⌛";
        }
    }

    public string TorLabel() {
        switch (ViewModel.Tor)
        {
            case WalletWasabi.Models.TorStatus.NotRunning:
                return "⌛";
            case WalletWasabi.Models.TorStatus.Running:
                return "✅";
            case WalletWasabi.Models.TorStatus.TurnedOff:
                return "📴";
            default:
                return "⌛";
        }
    }

    public string TorHiddenServiceStatus() {
        return ViewModel.IsTorHiddenServiceActive ? "✅" : "📴";
    }
}
